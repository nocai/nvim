# [[plugins]]
# repo = 'vim-airline/vim-airline'
# hook_add = '''
#   let g:airline_powerline_fonts = 1  " 支持 powerline 字体
#   let g:airline#extensions#tabline#enabled = 1
#   let g:airline#extensions#coc#enabled = 1
#   let g:airline#extensions#hunks#coc_git = 1
# '''

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
on_cmd = ['DeinUpdate']

[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = ['Dein']

[[plugins]]
merged = 1
repo = 'mengelbrecht/lightline-bufferline'
depends = 'lightline.vim'

[[plugins]]
merged = 1
repo = 'itchyny/lightline.vim'
hook_source = '''
let g:lightline = {
    \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \ 'colorscheme': 'one',
    \ 'active': {
    \   'left': [ 
    \             [ 'mode', 'paste' ],
    \             [ 'fugitive', 'gitgutter' ],
    \             [ 'filename', 'cocstatus' ],
    \           ],
    \ },
    \ 'tabline': {
    \   'left': [ ['buffers'] ],
    \   'right': [ ['close'] ]
    \ },
    \ 'component': {
	  \   'lineinfo': ' %3l:%-2c',
    \ },
    \ 'component_function': {
    \   'filename': 'LightlineFilename',
   	\   'fugitive': 'LightlineFugitive',
    \   'gitgutter': 'GitStatus',
	  \   'cocstatus': 'StatusDiagnostic',
    \ },
    \ 'component_expand': {
    \   'buffers': 'lightline#bufferline#buffers'
    \ },
    \ 'component_type': {
    \   'buffers': 'tabsel'
    \ }
    \ }

function! LightlineFugitive()
	if exists('*FugitiveHead')
    let branch = FugitiveHead()
    return branch !=# '' ? ' ' . branch : ''
	endif
  return ''
endfunction
" autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()
function! LightlineFilename()
    return (LightlineReadonly() !=# '' ? LightlineReadonly() . ' ' : '') .
    \ (&ft ==# 'vimfiler' ? vimfiler#get_status_string() :
    \  &ft ==# 'unite' ? unite#get_status_string() :
    \  &ft ==# 'vimshell' ? vimshell#get_status_string() :
    \ expand('%:t') !=# '' ? expand('%:t') : '[No Name]') .
    \ (LightlineModified() !=# '' ? ' ' . LightlineModified() : '')
endfunction
function! LightlineModified()
    return &ft =~# 'help\|vimfiler' ? '' : &modified ? '[+]' : &modifiable ? '' : '[-]'
endfunction
function! LightlineReadonly()
	return &readonly ? '' : ''
endfunction
function! StatusDiagnostic() abort
    let info = get(b:, 'coc_diagnostic_info', {})
    if empty(info) | return '' | endif
    let msgs = []
    if get(info, 'error', 0)
        call add(msgs, 'Error: ' . info['error'])
    endif
    if get(info, 'warning', 0)
        call add(msgs, 'Warning: ' . info['warning'])
    endif
    return join(msgs, 'ok') . '' . get(g:, 'coc_status', '')
endfunction
" Your vimrc
function! GitStatus()
	if exists('*GitGutterGetHunkSummary')
    let [a,m,r] = GitGutterGetHunkSummary()
    if a > 0 || m > 0 || r > 0
      return printf('+%d ~%d -%d', a, m, r)
    endif
    return ''
  endif
  return ''
endfunction
" set statusline+=%{GitStatus()}
'''

[[plugins]]
merged = 1
repo = "ryanoasis/vim-devicons"
on_source = "defx.nvim"
hook_add = '''
    let g:webdevicons_enable_airline_tabline = 1
    let g:webdevicons_enable_airline_statusline = 1
'''

[[plugins]]
repo = "Shougo/defx.nvim"
on_cmd = "Defx"
hook_add = '''
  nmap <silent>tt :<C-u>Defx<CR>
'''
hook_source = '''
    call defx#custom#option('_', {
      \ 'resume': 1,
      \ 'winwidth': 30,
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 0,
      \ 'columns': 'mark:indent:git:icons:filename',
      \ 'root_marker': '[in]: ',
      \ })
    call defx#custom#column('git', {
      \   'indicators': {
      \     'Modified'  : '•',
      \     'Staged'    : '✚',
      \     'Untracked' : 'ᵁ',
      \     'Renamed'   : '≫',
      \     'Unmerged'  : '≠',
      \     'Ignored'   : 'ⁱ',
      \     'Deleted'   : '✖',
      \     'Unknown'   : '⁇'
      \   }
      \ })
    " defx-icons plugin
    let g:defx_icons_column_length = 2
    let g:defx_icons_mark_icon = ''
    let g:defx_icons_parent_icon = ""
    call defx#custom#column('mark', { 'readonly_icon': '', 'selected_icon': '' })
    " Events
    " ---
    augroup user_plugin_defx
      autocmd!
      " Define defx window mappings
      autocmd FileType defx call <SID>defx_mappings()
      " Delete defx if it's the only buffer left in the window
      autocmd WinEnter * if &filetype == 'defx' && winnr('$') == 1 | bdel | endif
      " Move focus to the next window if current buffer is defx
      autocmd TabLeave * if &filetype == 'defx' | wincmd w | endif
    augroup END
    " Internal functions
    " ---
    function! s:jump_dirty(dir) abort
      " Jump to the next position with defx-git dirty symbols
      let l:icons = get(g:, 'defx_git_indicators', {})
      let l:icons_pattern = join(values(l:icons), '\|')
      if ! empty(l:icons_pattern)
        let l:direction = a:dir > 0 ? 'w' : 'bw'
        return search(printf('\(%s\)', l:icons_pattern), l:direction)
      endif
    endfunction
    function! s:defx_toggle_tree() abort
      " Open current file, or toggle directory expand/collapse
      if defx#is_directory()
        return defx#do_action('open_or_close_tree')
      endif
      return defx#do_action('multi', ['drop'])
    endfunction
    function! s:defx_mappings() abort
      " Defx window keyboard mappings
      setlocal signcolumn=no expandtab

      nnoremap <silent><buffer><expr> <CR>  defx#do_action('drop')
      nnoremap <silent><buffer><expr> o     defx#do_action('open_tree', 'toggle')

      nnoremap <silent><buffer><expr> i     defx#do_action('drop')
      nnoremap <silent><buffer><expr> h     defx#async_action('cd', ['..'])
      nnoremap <silent><buffer><expr> st    defx#do_action('multi', [['drop', 'tabnew'], 'quit'])
      nnoremap <silent><buffer><expr> v     defx#do_action('open', 'botright vsplit')
      nnoremap <silent><buffer><expr> s     defx#do_action('open', 'botright split')
      nnoremap <silent><buffer><expr> P     defx#do_action('preview')
      nnoremap <silent><buffer><expr> dd    defx#do_action('remove_trash')
      nnoremap <silent><buffer><expr> r     defx#do_action('rename')
      nnoremap <silent><buffer><expr> x     defx#do_action('execute_system')
      nnoremap <silent><buffer><expr> .     defx#do_action('toggle_ignored_files')
      nnoremap <silent><buffer><expr> yy    defx#do_action('yank_path')
      nnoremap <silent><buffer><expr> ~     defx#async_action('cd')
      nnoremap <silent><buffer><expr> q     defx#do_action('quit')
      nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
        \ ':<C-u>wincmd w<CR>' :
        \ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
      " Defx's buffer management
      nnoremap <silent><buffer><expr> q      defx#do_action('quit')
      nnoremap <silent><buffer><expr> se     defx#do_action('save_session')
      nnoremap <silent><buffer><expr> <C-r>  defx#do_action('redraw')
      nnoremap <silent><buffer><expr> <C-g>  defx#do_action('print')
      " File/dir management
      nnoremap <silent><buffer><expr><nowait> c  defx#do_action('copy')
      nnoremap <silent><buffer><expr><nowait> m  defx#do_action('move')
      nnoremap <silent><buffer><expr><nowait> p  defx#do_action('paste')
      nnoremap <silent><buffer><expr><nowait> r  defx#do_action('rename')
      nnoremap <silent><buffer><expr> dd defx#do_action('remove_trash')
      nnoremap <silent><buffer><expr> K  defx#do_action('new_directory')
      nnoremap <silent><buffer><expr> k  defx#do_action('new_multiple_files')
      " Jump
      nnoremap <silent><buffer>  [g :<C-u>call <SID>jump_dirty(-1)<CR>
      nnoremap <silent><buffer>  ]g :<C-u>call <SID>jump_dirty(1)<CR>
      " Change directory
      nnoremap <silent><buffer><expr><nowait> \  defx#do_action('cd', getcwd())
      nnoremap <silent><buffer><expr><nowait> &  defx#do_action('cd', getcwd())
      nnoremap <silent><buffer><expr> <BS>  defx#async_action('cd', ['..'])
      nnoremap <silent><buffer><expr> ~     defx#async_action('cd')
      nnoremap <silent><buffer><expr> u   defx#do_action('cd', ['..'])
      nnoremap <silent><buffer><expr> 2u  defx#do_action('cd', ['../..'])
      nnoremap <silent><buffer><expr> 3u  defx#do_action('cd', ['../../..'])
      nnoremap <silent><buffer><expr> 4u  defx#do_action('cd', ['../../../..'])
      " Selection
      nnoremap <silent><buffer><expr> *  defx#do_action('toggle_select_all')
      nnoremap <silent><buffer><expr><nowait> <Space>
        \ defx#do_action('toggle_select') . 'j'
      nnoremap <silent><buffer><expr> S  defx#do_action('toggle_sort', 'Time')
      nnoremap <silent><buffer><expr> C
        \ defx#do_action('toggle_columns', 'indent:mark:filename:type:size:time')
    endfunction
'''

[[plugins]]
repo = "kristijanhusak/defx-git"
on_source = "defx.nvim"

[[plugins]]
repo = "kristijanhusak/defx-icons"
on_source = "defx.nvim"

# [[plugins]]
# repo = 'mhinz/vim-startify'

