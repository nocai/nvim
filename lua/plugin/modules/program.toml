[[plugins]]
repo = 'luochen1990/rainbow'
on_ft = ["html", "css", "javascript", "javascriptreact","go","rust","vim","less","sass","json","toml"]
if = '!exists("g:vscode")'
hook_add = '''
    let g:rainbow_active = 1
'''

[[plugins]]
repo     = 'tpope/vim-surround'
on_event = ["BufReadPre","BufNewFile"]

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_event = ["BufReadPre","BufNewFile"]
if = '!exists("g:vscode")'


[[plugins]]
repo = 'thinca/vim-quickrun'
on_ft = ['go', 'java', 'javascript', 'typescript', 'lua', 'scala' ]
on_cmd = 'QuickRun'
if = '!exists("g:vscode")'
hook_add = '''
    let g:quickrun_config = {
    \   "_" : {
    \       "outputter" : "message",
    \   },
    \}
    let g:quickrun_no_default_key_mappings = 1
'''
hook_source = '''
    nmap <Leader>rr <Plug>(quickrun)
'''

[[plugins]]
repo = 'vim-test/vim-test'
on_ft = ['go', 'java', 'javascript', 'typescript', 'lua', 'scala' ]
if = '!exists("g:vscode")'
hook_add = '''
    let test#strategy = "neovim"
'''
hook_source = '''
    nmap <silent> <leader>tn :TestNearest<CR>
    nmap <silent> <leader>tf :TestFile<CR>
    nmap <silent> <leader>ts :TestSuite<CR>
    nmap <silent> <leader>tl :TestLast<CR>
    nmap <silent> <leader>tg :TestVisit<CR>
'''


[[plugins]]
repo = 'tpope/vim-commentary'
if = '!exists("g:vscode")'

[[plugins]]
repo = 'sbdchd/neoformat'
on_cmd = ['Neoformat', 'Neoformat!']
if = '!exists("g:vscode")'

[[plugins]]
repo = 'honza/vim-snippets'
depends = 'coc.nvim'
if = 'has("python3")'
if = '!exists("g:vscode")'
merged = 0


[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
if = '!exists("g:vscode")'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = "release"
merged = 0
if = '!exists("g:vscode")'
hook_add = '''
    let g:coc_snippet_next = '<TAB>'
    let g:coc_snippet_prev = '<S-TAB>'
    let g:snips_author = 'bucai'
    let g:coc_status_error_sign = '•'
    let g:coc_status_warning_sign = '•'
    let g:coc_global_extensions =[
		\ 'coc-marketplace',
		\ 'coc-snippets',
		\ 'coc-json',
		\ 'coc-highlight',
		\ 'coc-emoji',
		\ 'coc-lists',
		\ 'coc-stylelint',
		\ 'coc-yaml',
		\ 'coc-yank',
		\ 'coc-actions',
		\ 'coc-vimlsp',
		\ 'coc-vetur',
		\ 'coc-emmet',
		\ 'coc-prettier',
		\ 'coc-diagnostic',
		\ 'coc-translator',
    \]

    augroup coc_event
      autocmd!
      autocmd CursorHold * silent call CocActionAsync('highlight')
      autocmd ColorScheme * highlight! CocHighlightText guibg=#054c20 ctermbg=023

      autocmd BufWritePre *.go silent :call CocAction('runCommand', 'editor.action.organizeImport')
    augroup end

    "Use tab for trigger completion with characters ahead and navigate
    inoremap <silent><expr> <TAB>
          \ <SID>v:lua.is_pairs() ? "\<Right>" :
          \ pumvisible() ? "\<C-n>" :
          \ v:lua.check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> v:lua.is_pairs(v:true)? "\<Right> :
          \ pumvisible() ? "\<C-p>" : "\<C-h>"
    inoremap <expr><C-e> pumvisible() ? "\<C-p>" : "\<C-e>"

    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    " Use `[g` and `]g` to navigate diagnostics
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gt <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    nmap <silent>rn <Plug>(coc-rename)
    nmap <silent>ca <Plug>(coc-codeaction)
    nmap <silent>fc <Plug>(coc-fix-current)

    " Use K to show documentation in preview window.
    nnoremap <silent><silent>gh :call <SID>show_documentation()<CR>
    function! s:show_documentation()
     if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
     else
      call CocAction('doHover')
     endif
   endfunction

    " coc list
    nnoremap <silent> <leader><leader>l  :<C-u>CocList<cr>
    " Show all diagnostics.
    nnoremap <silent> <leader><leader>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions.
    nnoremap <silent> <leader><leader>e  :<C-u>CocList extensions<cr>
    " Show commands.
    nnoremap <silent> <leader><leader>c  :<C-u>CocList commands<cr>
    " Find symbol of current document.
    nnoremap <silent> <leader><leader>o  :<C-u>CocList outline<cr>
    " Search workspace symbols.
    nnoremap <silent> <leader><leader>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent><nowait> <leader><leader>n  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent><nowait> <leader><leader>e  :<C-u>CocPrev<CR>
    " Resume latest coc list.
    nnoremap <silent><nowait> <leader><leader>p  :<C-u>CocListResume<CR>

    " Map function and class text objects
    xmap lf <Plug>(coc-funcobj-i)
    omap lf <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a) 

    " coc-translator
    nmap <leader>ts <Plug>(coc-translator-p)
    " coc-yank
    nnoremap <silent> <leader>ya :<C-u>CocList -A --normal yank<cr>
'''


