[[plugins]]
repo = 'neoclide/coc.nvim'
rev = "release"
merged = 0
if = '!exists("g:vscode")'

hook_add = '''
let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'
let g:snips_author = 'bucai'
let g:coc_global_extensions =[ 'coc-marketplace', 'coc-snippets', 'coc-json', 'coc-lists', 'coc-stylelint', 'coc-yaml', 'coc-actions', 'coc-vimlsp', 'coc-vetur', 'coc-emmet', 'coc-prettier', 'coc-diagnostic' ]

autocmd BufWritePre *.go silent :call CocAction('runCommand', 'editor.action.organizeImport')

inoremap <silent><expr><TAB> v:lua.is_pairs() ? "<Right>" : pumvisible() ? "<C-n>" : v:lua.check_back_space() ? "<TAB>" : coc#refresh()
inoremap <silent><expr><S-TAB> v:lua.is_pairs(v:true) ? "<Left>" : pumvisible() ? "<C-p>" : "<C-h>"

inoremap <silent><expr> <CR> pumvisible() ? coc#_select_confirm() : "<C-g>u<CR><c-r>=coc#on_enter()<CR>"
inoremap <expr><C-e> pumvisible() ? "<C-p>" : "<C-e>"

nmap <silent>[g <Plug>(coc-diagnostic-prev)
nmap <silent>]g <Plug>(coc-diagnostic-next)

nmap <silent>gd <Plug>(coc-definition)
nmap <silent>gD <Plug>(coc-declaration)
nmap <silent>gy <Plug>(coc-type-definition)
nmap <silent>gi <Plug>(coc-implementation)
nmap <silent>gr <Plug>(coc-references)
nmap <silent>rn <Plug>(coc-rename)

nmap <silent><leader>rf <Plug>(coc-refactor)
nmap <silent><leader>ac <Plug>(coc-codeaction)

nnoremap <silent><leader><leader>l  :<C-u>CocList<cr>
nnoremap <silent><leader><leader>a  :<C-u>CocList diagnostics<cr>
nnoremap <silent><leader><leader>e  :<C-u>CocList extensions<cr>
nnoremap <silent><leader><leader>c  :<C-u>CocList commands<cr>
nnoremap <silent><leader><leader>o  :<C-u>CocList outline<cr>
nnoremap <silent><leader><leader>s  :<C-u>CocList -I symbols<cr>
nnoremap <silent><leader><leader>n  :<C-u>CocNext<CR>
nnoremap <silent><leader><leader>p  :<C-u>CocPrev<CR>
nnoremap <silent><leader><leader>r  :<C-u>CocListResume<CR>

nnoremap <silent>gh :call CocActionAsync('doHover')<CR>

xmap lf <Plug>(coc-funcobj-i)
omap lf <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a) 
'''


